// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@alot/transformer transpiles es5/leftPad.ts 1`] = `"Object.defineProperty(exports,\\"__esModule\\",{value:true});exports.leftPad=leftPad;var cache=['',' ','  ','   ','    ','     ','      ','       ','        ','         '];function leftPad(str,len){var ch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:' ';str=str+'';len=len-str.length;if(len<=0)return str;if(!ch&&ch!==0)ch=' ';ch=ch+'';if(ch===' '&&len<10)return cache[len]+str;var pad='';while(true){if(len&1)pad+=ch;len>>=1;if(len)ch+=ch;else break;}return pad+str;}"`;

exports[`@alot/transformer transpiles es5/leftPad.ts 2`] = `
Object {
  "mappings": "iEAaMA,QAAAA,QAbN,GAAMC,OAAkB,CACtB,EADsB,CAEtB,GAFsB,CAGtB,IAHsB,CAItB,KAJsB,CAKtB,MALsB,CAMtB,OANsB,CAOtB,QAPsB,CAQtB,SARsB,CAStB,UATsB,CAUtB,WAVsB,CAAxB,CAaM,QAAAD,QAAA,CAAkBE,GAAlB,CAA+BC,GAA/B,CAAqE,IAAzBC,GAAyB,2DAAH,GAAG,CAEzEF,IAAMA,IAAM,EAAZ,CAEAC,IAAMA,IAAMD,IAAIG,MAAhB,CAEA,GAAIF,KAAO,CAAX,CAAc,MAAOD,IAAP,CAEd,GAAI,CAACE,EAAD,EAAOA,KAAO,CAAlB,CAAqBA,GAAK,GAAL,CAErBA,GAAKA,GAAK,EAAV,CAEA,GAAIA,KAAO,GAAP,EAAcD,IAAM,EAAxB,CAA4B,MAAOF,OAAME,GAAN,EAAaD,GAApB,CAE5B,GAAII,KAAM,EAAV,CAEA,MAAO,IAAP,CAAa,CAEX,GAAIH,IAAM,CAAV,CAAaG,KAAOF,EAAP,CAEbD,MAAQ,CAAR,CAIA,GAAIA,GAAJ,CAASC,IAAMA,EAAN,CAAT,IAEK,OACN,CAED,MAAOE,KAAMJ,GAAb,CACD",
  "names": Array [
    "leftPad",
    "cache",
    "str",
    "len",
    "ch",
    "length",
    "pad",
  ],
  "sourcesContent": Array [
    "const cache: string[] = [
  '',
  ' ',
  '  ',
  '   ',
  '    ',
  '     ',
  '      ',
  '       ',
  '        ',
  '         ',
];

export function leftPad(str: string, len: number, ch: string | number = ' '): string {
  // convert \`str\` to a \`string\`
  str = str + '';
  // \`len\` is the \`pad\`'s length now
  len = len - str.length;
  // doesn't need to pad
  if (len <= 0) return str;
  // \`ch\` defaults to \`' '\`
  if (!ch && ch !== 0) ch = ' ';
  // convert \`ch\` to a \`string\` cuz it could be a number
  ch = ch + '';
  // cache common use cases
  if (ch === ' ' && len < 10) return cache[len] + str;
  // \`pad\` starts with an empty string
  let pad = '';
  // loop
  while (true) {
    // add \`ch\` to \`pad\` if \`len\` is odd
    if (len & 1) pad += ch;
    // divide \`len\` by 2, ditch the remainder
    len >>= 1;
    // \\"double\\" the \`ch\` so this operation count grows logarithmically on \`len\`
    // each time \`ch\` is \\"doubled\\", the \`len\` would need to be \\"doubled\\" too
    // similar to finding a value in binary search tree, hence O(log(n))
    if (len) ch += ch;
    // \`len\` is 0, exit the loop
    else break;
  }
  // pad \`str\`!
  return pad + str;
}
",
  ],
  "version": 3,
}
`;

exports[`@alot/transformer transpiles es2015/leftPad.ts 1`] = `"Object.defineProperty(exports,\\"__esModule\\",{value:true});exports.leftPad=leftPad;var cache=['',' ','  ','   ','    ','     ','      ','       ','        ','         '];function leftPad(str,len){var ch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:' ';str=str+'';len=len-str.length;if(len<=0)return str;if(!ch&&ch!==0)ch=' ';ch=ch+'';if(ch===' '&&len<10)return cache[len]+str;var pad='';while(true){if(len&1)pad+=ch;len>>=1;if(len)ch+=ch;else break;}return pad+str;}"`;

exports[`@alot/transformer transpiles es2015/leftPad.ts 2`] = `
Object {
  "mappings": "iEAaMA,QAAAA,QAbN,GAAMC,OAAkB,CACtB,EADsB,CAEtB,GAFsB,CAGtB,IAHsB,CAItB,KAJsB,CAKtB,MALsB,CAMtB,OANsB,CAOtB,QAPsB,CAQtB,SARsB,CAStB,UATsB,CAUtB,WAVsB,CAAxB,CAaM,QAAAD,QAAA,CAAkBE,GAAlB,CAA+BC,GAA/B,CAAqE,IAAzBC,GAAyB,2DAAH,GAAG,CAEzEF,IAAMA,IAAM,EAAZ,CAEAC,IAAMA,IAAMD,IAAIG,MAAhB,CAEA,GAAIF,KAAO,CAAX,CAAc,MAAOD,IAAP,CAEd,GAAI,CAACE,EAAD,EAAOA,KAAO,CAAlB,CAAqBA,GAAK,GAAL,CAErBA,GAAKA,GAAK,EAAV,CAEA,GAAIA,KAAO,GAAP,EAAcD,IAAM,EAAxB,CAA4B,MAAOF,OAAME,GAAN,EAAaD,GAApB,CAE5B,GAAII,KAAM,EAAV,CAEA,MAAO,IAAP,CAAa,CAEX,GAAIH,IAAM,CAAV,CAAaG,KAAOF,EAAP,CAEbD,MAAQ,CAAR,CAIA,GAAIA,GAAJ,CAASC,IAAMA,EAAN,CAAT,IAEK,OACN,CAED,MAAOE,KAAMJ,GAAb,CACD",
  "names": Array [
    "leftPad",
    "cache",
    "str",
    "len",
    "ch",
    "length",
    "pad",
  ],
  "sourcesContent": Array [
    "const cache: string[] = [
  '',
  ' ',
  '  ',
  '   ',
  '    ',
  '     ',
  '      ',
  '       ',
  '        ',
  '         ',
];

export function leftPad(str: string, len: number, ch: string | number = ' '): string {
  // convert \`str\` to a \`string\`
  str = str + '';
  // \`len\` is the \`pad\`'s length now
  len = len - str.length;
  // doesn't need to pad
  if (len <= 0) return str;
  // \`ch\` defaults to \`' '\`
  if (!ch && ch !== 0) ch = ' ';
  // convert \`ch\` to a \`string\` cuz it could be a number
  ch = ch + '';
  // cache common use cases
  if (ch === ' ' && len < 10) return cache[len] + str;
  // \`pad\` starts with an empty string
  let pad = '';
  // loop
  while (true) {
    // add \`ch\` to \`pad\` if \`len\` is odd
    if (len & 1) pad += ch;
    // divide \`len\` by 2, ditch the remainder
    len >>= 1;
    // \\"double\\" the \`ch\` so this operation count grows logarithmically on \`len\`
    // each time \`ch\` is \\"doubled\\", the \`len\` would need to be \\"doubled\\" too
    // similar to finding a value in binary search tree, hence O(log(n))
    if (len) ch += ch;
    // \`len\` is 0, exit the loop
    else break;
  }
  // pad \`str\`!
  return pad + str;
}
",
  ],
  "version": 3,
}
`;

exports[`@alot/transformer transpiles es2016/leftPad.ts 1`] = `"Object.defineProperty(exports,\\"__esModule\\",{value:true});exports.leftPad=leftPad;var cache=['',' ','  ','   ','    ','     ','      ','       ','        ','         '];function leftPad(str,len){var ch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:' ';str=str+'';len=len-str.length;if(len<=0)return str;if(!ch&&ch!==0)ch=' ';ch=ch+'';if(ch===' '&&len<10)return cache[len]+str;var pad='';while(true){if(len&1)pad+=ch;len>>=1;if(len)ch+=ch;else break;}return pad+str;}"`;

exports[`@alot/transformer transpiles es2016/leftPad.ts 2`] = `
Object {
  "mappings": "iEAaMA,QAAAA,QAbN,GAAMC,OAAkB,CACtB,EADsB,CAEtB,GAFsB,CAGtB,IAHsB,CAItB,KAJsB,CAKtB,MALsB,CAMtB,OANsB,CAOtB,QAPsB,CAQtB,SARsB,CAStB,UATsB,CAUtB,WAVsB,CAAxB,CAaM,QAAAD,QAAA,CAAkBE,GAAlB,CAA+BC,GAA/B,CAAqE,IAAzBC,GAAyB,2DAAH,GAAG,CAEzEF,IAAMA,IAAM,EAAZ,CAEAC,IAAMA,IAAMD,IAAIG,MAAhB,CAEA,GAAIF,KAAO,CAAX,CAAc,MAAOD,IAAP,CAEd,GAAI,CAACE,EAAD,EAAOA,KAAO,CAAlB,CAAqBA,GAAK,GAAL,CAErBA,GAAKA,GAAK,EAAV,CAEA,GAAIA,KAAO,GAAP,EAAcD,IAAM,EAAxB,CAA4B,MAAOF,OAAME,GAAN,EAAaD,GAApB,CAE5B,GAAII,KAAM,EAAV,CAEA,MAAO,IAAP,CAAa,CAEX,GAAIH,IAAM,CAAV,CAAaG,KAAOF,EAAP,CAEbD,MAAQ,CAAR,CAIA,GAAIA,GAAJ,CAASC,IAAMA,EAAN,CAAT,IAEK,OACN,CAED,MAAOE,KAAMJ,GAAb,CACD",
  "names": Array [
    "leftPad",
    "cache",
    "str",
    "len",
    "ch",
    "length",
    "pad",
  ],
  "sourcesContent": Array [
    "const cache: string[] = [
  '',
  ' ',
  '  ',
  '   ',
  '    ',
  '     ',
  '      ',
  '       ',
  '        ',
  '         ',
];

export function leftPad(str: string, len: number, ch: string | number = ' '): string {
  // convert \`str\` to a \`string\`
  str = str + '';
  // \`len\` is the \`pad\`'s length now
  len = len - str.length;
  // doesn't need to pad
  if (len <= 0) return str;
  // \`ch\` defaults to \`' '\`
  if (!ch && ch !== 0) ch = ' ';
  // convert \`ch\` to a \`string\` cuz it could be a number
  ch = ch + '';
  // cache common use cases
  if (ch === ' ' && len < 10) return cache[len] + str;
  // \`pad\` starts with an empty string
  let pad = '';
  // loop
  while (true) {
    // add \`ch\` to \`pad\` if \`len\` is odd
    if (len & 1) pad += ch;
    // divide \`len\` by 2, ditch the remainder
    len >>= 1;
    // \\"double\\" the \`ch\` so this operation count grows logarithmically on \`len\`
    // each time \`ch\` is \\"doubled\\", the \`len\` would need to be \\"doubled\\" too
    // similar to finding a value in binary search tree, hence O(log(n))
    if (len) ch += ch;
    // \`len\` is 0, exit the loop
    else break;
  }
  // pad \`str\`!
  return pad + str;
}
",
  ],
  "version": 3,
}
`;
